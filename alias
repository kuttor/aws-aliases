[toplevel] 
#
# Custom AWS Aliases
#
# aliases: prints all aws aliases
aliases = 
  !f() {
    grep -E ^"#" ~/.aws/cli/alias;
  }; f
#
# instances: describe all va's per account
instances = ec2 describe-instances --output table \
  --query 'Reservations[].Instances[].{
    Name:Tags[?Key==`Name`].Value|[0],
    Project:Tags[?Key==`Project`].Value|[0],
    ID:InstanceId,
    PrivateIP:PrivateIpAddress,
    PublicIP:PublicIpAddress,
    Status:State.Name
  }'
#
# cfstacks: list all CF stacks and their status
cfstacks = cloudformation describe-stacks --output table \
  --query 'Stacks[].{
    Name:StackName,
    Status:StackStatus
  }'
#
# secgroups: list all security groups
secgroups = ec2 describe-security-groups --output table \
  --query 'SecurityGroups[].{
    Name:GroupName,
    ID:GroupId,
    Owner:OwnerId
  }'
#
# vpcs: list all vpcs and important info
vpcs = ec2 describe-vpcs --output table \
  --query 'Vpcs[].{
    ID:VpcId,
    Name:Tags[?Key==`Name`].Value|[0],
    Status:State
  }'
#
# subnets: list all subnets and important info
subnets = ec2 describe-subnets --output table \
  --query 'Subnets[].{
    Name:Tags[?Key==`Name`].Value|[0],
    ID:SubnetId,
    AZ:AvailabilityZone,
    VPCId:VpcId
  }'
#
# elbs: list all elbs and important info
elbs = elb describe-load-balancers --output table \
  --query 'LoadBalancerDescriptions[].{
    Name:LoadBalancerName, 
    SourceSG:SourceSecurityGroup.GroupName
  }'
#
# public-ports: = list all SG port ranges open to 0.0.0.0/0
public-ports = ec2 describe-security-groups \
  --filters Name=ip-permission.cidr,Values=0.0.0.0/0 \
  --query 'SecurityGroups[].{
    GroupName:GroupName,
    GroupId:GroupId,
    PortRanges:IpPermissions[?contains(IpRanges[].
    CidrIp, `0.0.0.0/0`)].[
      join(`:`, [IpProtocol,
      join(`-`, [to_string(FromPort),
      to_string(ToPort)
  ])])][]}'
#
# region: list or set region
region = 
  !f() { 
    [[ $# -eq 1 ]] && aws configure set region "$1" \
    || aws configure get region;
  }; f
#
# profile: Switches to a target IAM CLI user
profile =
  !f() {
    [[ $# -eq 1 ]] && \
      printf "Set profile to $1";
      export AWS_DEFAULT_PROFILE=$1;
      aws configure list \
    || aws configure list;
  }; f
#
# tostring: Converts string to alias format via jmespath
tostring = 
  !f() {
    jp -f "${1}" 'to_string(@)';
  }; f
#
# tostring-with-jq: Converts string to alias format via JQ
tostring-with-jq = 
  !f() {
    cat "${1}" | jq 'tostring';
  }; f
