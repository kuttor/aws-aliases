#!/usr/bin/env bash

[toplevel] 

# aliases
## prints all aws aliases
aliases = 
  !f() {
    grep -E ^"#" ~/.aws/cli/alias;
  }; f

# instances
## describe all va's per account
instances = ec2 describe-instances --output table \
  --query 'Reservations[].Instances[].{
    Name:Tags[?Key==`Name`].Value|[0],
    Project:Tags[?Key==`Project`].Value|[0],
    ID:InstanceId,
    PrivateIP:PrivateIpAddress,
    PublicIP:PublicIpAddress,
    Status:State.Name
  }'

#
find-access-key = !f() {
    clear_to_eol=$(tput el)
    for i in $(aws iam list-users --query "Users[].UserName" --output text); do
      printf "\r%sSearching...$i" "${clear_to_eol}"
      result=$(aws iam list-access-keys --output text --user-name "${i}" --query "AccessKeyMetadata[?AccessKeyId=='${1}'].UserName";)
      if [ -n "${result}" ]; then
         printf "\r%s%s is owned by %s.\n" "${lear_to_eol}" "$1" "${result}"
         break
      fi
    done
    if [ -z "${result}" ]; then
      printf "\r%sKey not found." "${clear_to_eol}"
    fi
  }; f


# cfstacks
## list all CF stacks and their status
cfstacks = cloudformation describe-stacks --output table \
  --query 'Stacks[].{
    Name:StackName,
    Status:StackStatus
  }'

# secgroups
## list all security groups
secgroups = ec2 describe-security-groups --output table \
  --query 'SecurityGroups[].{
    Name:GroupName,
    ID:GroupId,
    Owner:OwnerId
  }'

# vpcs
## list all vpcs and important info
vpcs = ec2 describe-vpcs --output table \
  --query 'Vpcs[].{
    ID:VpcId,
    Name:Tags[?Key==`Name`].Value|[0],
    Status:State
  }'

# subnets
## list all subnets and important info
subnets = ec2 describe-subnets --output table \
  --query 'Subnets[].{
    Name:Tags[?Key==`Name`].Value|[0],
    ID:SubnetId,
    AZ:AvailabilityZone,
    VPCId:VpcId
  }'

# elbs
## list all elbs and important info
elbs = elb describe-load-balancers --output table \
  --query 'LoadBalancerDescriptions[].{
    Name:LoadBalancerName, 
    DNSName:DNSName,
    SecGroup:DNSName.SecurityGroups
  }'

# public-ports
## list all SG port ranges open to 0.0.0.0/0
public-ports = ec2 describe-security-groups \
  --filters Name=ip-permission.cidr,Values=0.0.0.0/0 \
  --query 'SecurityGroups[].{
    GroupName:GroupName,
    GroupId:GroupId,
    PortRanges:IpPermissions[?contains(IpRanges[].
    CidrIp, `0.0.0.0/0`)].[
      join(`:`, [IpProtocol,
      join(`-`, [to_string(FromPort),
      to_string(ToPort)
  ])])][]}'

# find-elb
# Queries for an elb matching search
find-elb =
  !f() {
    query=($(aws elb describe-load-balancers --output text --query 'LoadBalancerDescriptions[?starts_with(LoadBalancerName, `'${1}'`) ==`true`].[LoadBalancerName]'))
    aws elb describe-load-balancers --load-balancer-names "${query}"
  }; f

# region
## list or set region
region =
  !f() { 
    [[ $# -eq 1 ]] && aws configure set region "$1" \
    || aws configure get region;
  }; f

# project-endpoint
## finds all endpoints in aws account
endpoints = ec2 describe-instances \
  --query 'Reservations[].Instances[].[Tags[?Key==`Project-Endpoint`].Value | [0]]' \
  --filter 'Name=tag:Component,Values=Appliance' \
  --output text

# profile
## Switches to a target IAM CLI user
profile =
  !f() {
    if $1
    then
      printf "Setting profile to $1";
      export AWS_DEFAULT_PROFILE=$1;
    else
      aws configure list;
    fi
  }; f

# tostring
## Converts string to alias format via jmespath
tostring = 
  !f() {
    jp -f "${1}" 'to_string(@)';
  }; f

# tostring-with-jq
## Converts string to alias format via JQ
tostring-with-jq = 
  !f() {
    cat "${1}" | jq 'tostring';
  }; f

# latest-intuit-ami
## Retrieves the latest ami build by using a region as argument. 
intuit-ami =
  !f() {
    [[ $# -eq 1 ]] && region=$1 \
    || echo 'Missing Region, using default'; region=$(aws configure get region);

    distro="rhel7.2";
    ami_raw=$(curl -s "https://hosting.intuit.com/amiquery/amis?tag=osVersion:$distro&tag=virtualization:hvm&status=available&tag=relatedTechnology:linux&region=${region}") 2>/dev/null;
    ami_id=$(echo "$ami_raw" | jq -r 'max_by(.tags.creationDate).id');
    echo $ami_id;
  }; f

# instances-by-name
instances-by-name =
  !f() {
    aws ec2 describe-instances --output table --filters "Name=tag:Name,Values=$1"
  }; f
